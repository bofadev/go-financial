{"version":3,"sources":["components/MainHeader.js","components/reviewTableItem.js","components/Form.js","components/MainContent.js","App.js","serviceWorker.js","index.js"],"names":["MainHeader","className","React","Component","ReviewTableItem","props","onDelete","onDeleteItem","review","Key","divStyle","backgroundColor","this","Type","style","Name","Balance","onClick","Form","isNameValid","val","isBalanceValid","MIN_BALANCE","MAX_BALANCE","GetNameHelpText","state","name","class","GetBalanceHelpText","balance","clearNameBalance","inputName","document","getElementById","inputBalance","setAttribute","value","setState","prev","onClickSubmit","console","log","type","url","fetch","then","r","json","setFormDirty","onSelectTypeChange","event","target","onInputNameChange","input","btn","everythingValid","classList","add","remove","removeAttribute","onclick","onInputBalanceChange","onChange","id","placeholder","min","max","disabled","MainContent","getData","data","reviews","netWorth","NetWorth","totalAssets","TotalAssets","totalLiabilities","TotalLiabilities","onFormDirty","key","window","confirm","renderTableRow","item","renderTableRows","map","App","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.576258f2.chunk.js","sourcesContent":["import React from 'react'\nimport '../css/mainHeader.css'\nimport 'bulma/css/bulma.css'\n\nclass MainHeader extends React.Component {\n\n    render(){\n        return(\n            <div className=\"main-header title is-1\">\n                Asset/Liability Reviewer\n            </div>\n        )\n    }\n}\n\nexport default MainHeader","import React from 'react'\nimport '../css/reviewTableItem.css'\nimport 'bulma/css/bulma.css'\n\nclass ReviewTableItem extends React.Component {\n\n    constructor(props){\n        super(props)\n    }\n\n    onDelete = () => {\n        this.props.onDeleteItem(this.props.review.Key)\n    }\n    \n\n    render(){\n\n        const colorAsset = '#33ffa5'\n        const colorLiability = '#ffe633'\n        let divStyle = {\n            backgroundColor: \"\"\n          };\n\n        if(this.props.review.Type === \"Asset\"){\n            divStyle.backgroundColor = colorAsset\n        }\n        else {\n            divStyle.backgroundColor = colorLiability\n        }\n\n        return(            \n            <tr style={divStyle}>\n                <td>{this.props.review.Type}</td>\n                <td>{this.props.review.Name}</td>\n                <td>${this.props.review.Balance}</td>\n                <td><button className=\"button is-danger\" onClick={() => this.onDelete()}>delete</button></td>\n            </tr>\n        )\n    }\n}\n\nexport default ReviewTableItem","import React from 'react'\nimport 'bulma/css/bulma.css'\n\nclass Form extends React.Component {\n\n\n    constructor(props){\n        super(props)\n        this.state={\n            type: \"Asset\",\n            name: \"\",\n            balance: -1\n        }\n\n\n        this.MIN_BALANCE = 0;\n        this.MAX_BALANCE = 9999999;\n    }\n\n    isNameValid = (val) => {\n        if(val === \"\"){\n            return false\n        }\n\n        return true\n    }\n    isBalanceValid = (val) => {\n\n        if(val === \"\" || val < this.MIN_BALANCE || val > this.MAX_BALANCE)\n        {\n            return false;\n        }\n\n        return true\n    }\n\n    GetNameHelpText = () => {\n\n        if(this.isNameValid(this.state.name) == false)\n        {\n            return(\n                <p class=\"help is-danger\">\n                    Please provide a name\n                </p>\n            )\n        }\n    }\n    GetBalanceHelpText = () => {\n\n        if(this.isBalanceValid(this.state.balance) == false)\n        {\n            return(\n                <p class=\"help is-danger\">\n                    Value must be within range {this.MIN_BALANCE}...{this.MAX_BALANCE}\n                </p>\n            )\n        }\n    }\n\n    clearNameBalance = () => {\n\n        const inputName = document.getElementById(\"name-input\")\n        const inputBalance = document.getElementById(\"balance-input\")\n        const btn = document.getElementById(\"submit-btn\")\n\n        btn.setAttribute(\"disabled\", \"true\")\n\n        inputName.value = \"\";\n        inputBalance.value = \"\";\n\n        this.setState(prev =>{\n            return({\n                ...prev,\n                name: \"\",\n                balance: -1\n            })\n        })\n    }\n\n    onClickSubmit = () => {\n\n        if(this.isNameValid(this.state.name) === false || this.isBalanceValid(this.state.balance) === false)\n        {            \n            return\n        }\n        \n        console.log(`Submitting new review - [type:${this.state.type}] [name:${this.state.name}] [balance:${this.state.balance}]`)\n\n        const url = `/review/add?type=${this.state.type}&name=${this.state.name}&balance=${this.state.balance}`;\n        fetch(url)\n        .then(r => r.json())\n        .then(r => {\n            console.log(r)\n            this.props.setFormDirty()\n        })\n\n        this.clearNameBalance()\n    }\n    onSelectTypeChange = (event) => {\n        const val = event.target.value;\n        \n        this.setState(prev =>{\n            return{\n                ...prev,\n                type: val\n            }\n        })\n    }\n    onInputNameChange = (event) => {\n        const val = event.target.value;\n\n        const input = document.getElementById(\"name-input\")\n        const btn = document.getElementById(\"submit-btn\")\n\n        let everythingValid = true\n        if(this.isNameValid(val) == false)\n        {\n            everythingValid = false\n            input.classList.add(\"is-danger\")\n            btn.setAttribute(\"disabled\", \"true\")\n        }\n        else {\n            input.classList.remove(\"is-danger\")\n        }\n        if(this.isBalanceValid(this.state.balance) == false)\n        {\n            everythingValid = false\n            btn.setAttribute(\"disabled\", \"true\")\n        }\n\n        if(everythingValid === true)\n        {\n            btn.removeAttribute(\"disabled\")\n            btn.onclick = () => {this.onClickSubmit();}\n        }\n\n        this.setState(prev =>{\n            return{\n                ...prev,\n                name: val\n            }\n        })\n    }\n    onInputBalanceChange = (event) => {\n        const val = event.target.value;\n\n        const input = document.getElementById(\"balance-input\")\n        const btn = document.getElementById(\"submit-btn\")\n\n        let everythingValid = true\n        if(this.isBalanceValid(val) == false)\n        {\n            everythingValid = false\n            input.classList.add(\"is-danger\")\n            btn.setAttribute(\"disabled\", \"true\")\n        }\n        else\n        {\n            input.classList.remove(\"is-danger\")\n        }        \n        if(this.isNameValid(this.state.name) == false)\n        {\n            everythingValid = false\n            btn.setAttribute(\"disabled\", \"true\")\n        }\n\n        if(everythingValid === true)\n        {\n            btn.removeAttribute(\"disabled\")\n            btn.onclick = () => {this.onClickSubmit();}\n        }\n\n        this.setState(prev =>{\n            return{\n                ...prev,\n                balance: val\n            }\n        })\n    }\n\n    render(){\n        return(\n            <div className=\"form box\">\n\n                <div class=\"field\">\n                    <label class=\"label\">Type</label>\n                    <div class=\"control\">\n                        <div class=\"select\">\n                            <select onChange={this.onSelectTypeChange}>\n                                <option>Asset</option>\n                                <option>Liability</option>\n                            </select>\n                        </div>\n                    </div>\n                </div>\n\n                <label class=\"label\">Name</label>\n                <p class=\"control has-icons-left\">\n                    <input id=\"name-input\" class=\"input is-danger\" type=\"text\" placeholder=\"Name\" onChange={this.onInputNameChange}/>\n                    <span class=\"icon is-small is-left\">\n                        <i class=\"fa fa-user-circle\"></i>\n                    </span>\n                </p>\n                {this.GetNameHelpText()}\n\n                <label class=\"label\">Balance</label>\n                <p class=\"control has-icons-left\">\n                    <input id=\"balance-input\" class=\"input is-danger\" type=\"number\" min=\"0\" max=\"9999999\" placeholder=\"Amount\" onChange={this.onInputBalanceChange}/>\n                    <span class=\"icon is-small is-left\">\n                        <i class=\"fa fa-dollar\"></i>\n                    </span>\n                </p>\n                {this.GetBalanceHelpText()}\n\n                <div className=\"field\">\n                    <p className=\"control\">\n                        <button disabled id=\"submit-btn\" className=\"button is-link\" onclick={() => {console.log(\"yerp\")}}>Submit</button>\n                    </p>\n                </div>\n\n            </div>\n        )\n    }\n}\n\nexport default Form","import React from 'react'\nimport '../css/mainContent.css'\nimport 'bulma/css/bulma.css'\nimport ReviewTableItem from './reviewTableItem'\nimport Form from './Form'\n\nclass MainContent extends React.Component {\n\n    constructor(props){\n        super(props)\n        this.state = {\n            reviews: [],\n            netWorth: 0,\n            totalAssets: 0,\n            totalLiabilities: 0\n        }\n    }\n\n    getData = () => {        \n                \n        fetch(\"/reviews/get\")\n        .then(r => r.json())\n        .then(data => {\n            this.setState(prev => {\n                return {\n                    ...prev,\n                    reviews: data\n                }\n            })\n\n            fetch(\"/getTotals\")\n            .then(r => r.json())\n            .then(data => {\n                this.setState(prev => {\n                    return {\n                        ...prev,\n                        netWorth: data.NetWorth,\n                        totalAssets: data.TotalAssets,\n                        totalLiabilities: data.TotalLiabilities\n                    }\n                })\n            })\n        })\n    }\n    onFormDirty = () => {\n        this.getData()\n    }\n    onDeleteItem = (key) => {\n\n        if(window.confirm(\"Delete the entry?\") === false)\n        {\n            return;\n        }\n\n        console.log(`Deleting review - [key:${key}]`)\n\n        const url = `/review/delete?key=${key}`;\n        fetch(url)\n        .then(r => r.json())\n        .then(r => {\n            console.log(r)\n            this.getData()\n        })\n    }\n\n    renderTableRow = (item) => {\n        return <ReviewTableItem review={item} onDeleteItem={key => this.onDeleteItem(key)}/>\n    }\n    renderTableRows = () => {        \n        return this.state.reviews.map(this.renderTableRow)\n    }\n\n    componentDidMount(){\n        this.getData()\n    }\n    \n\n    render(){\n        return(\n            <div className=\"main-content\">\n                <div className=\"left-content\">\n                    <table className=\"table is-striped is-hoverable\">\n                        <thead>\n                            <tr>\n                                <th>Type</th>\n                                <th>Name</th>\n                                <th>Balance</th>\n                            </tr>\n                        </thead>\n                        <tbody>                                \n                            {this.renderTableRows()}\n                        </tbody>\n                    </table>\n                </div>\n                <div className=\"right-content\">\n                    <div className=\"follow\">\n\n                        <table className=\"table\">\n                            <thead>\n                                <tr>\n                                    <th>Net Worth</th>\n                                    <th>Assets</th>\n                                    <th>Liabilities</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                    <tr>\n                                        <td>${this.state.netWorth}</td>\n                                        <td>${this.state.totalAssets}</td>\n                                        <td>${this.state.totalLiabilities}</td>\n                                    </tr>\n                            </tbody>\n                        </table>\n                        <hr />\n                        \n                        <p className=\"title right-title\">Add New Item</p>\n                        <Form setFormDirty={() => this.onFormDirty()}/>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default MainContent","import './App.css';\n\nimport React from 'react';\nimport MainHeader from './components/MainHeader';\nimport MainContent from './components/MainContent';\n\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <div className=\"app-header\">\n        <MainHeader />\n      </div>\n      <hr className=\"app-hr\"/>\n      <div className=\"app-body\">\n        <MainContent />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}